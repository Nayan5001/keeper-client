{"ast":null,"code":"/*jshint strict:true node:true es5:true onevar:true laxcomma:true laxbreak:true eqeqeq:true immed:true latedef:true*/\n(function () {\n  \"use strict\";\n  /**\n   * A naiive 'Buffer.indexOf' function. Requires both the\n   * needle and haystack to be Buffer instances.\n   */\n\n  function indexOf(haystack, needle, i) {\n    if (!Buffer.isBuffer(needle)) needle = new Buffer(needle);\n    if (typeof i === 'undefined') i = 0;\n    var l = haystack.length - needle.length + 1;\n\n    while (i < l) {\n      var good = true;\n\n      for (var j = 0, n = needle.length; j < n; j++) {\n        if (haystack[i + j] !== needle[j]) {\n          good = false;\n          break;\n        }\n      }\n\n      if (good) return i;\n      i++;\n    }\n\n    return -1;\n  }\n\n  if (!Buffer.indexOf) {\n    Buffer.indexOf = indexOf;\n  }\n\n  if (!Buffer.prototype.indexOf) {\n    Buffer.prototype.indexOf = function (needle, i) {\n      return Buffer.indexOf(this, needle, i);\n    };\n  }\n})();","map":null,"metadata":{},"sourceType":"script"}