{"ast":null,"code":"/*jshint strict:true node:true es5:true onevar:true laxcomma:true laxbreak:true eqeqeq:true immed:true latedef:true*/\n//\n// FormData\n//\n// http://hacks.mozilla.org/2010/05/formdata-interface-coming-to-firefox/\n//\n(function () {\n  \"use strict\";\n\n  require('remedial');\n\n  require('bufferjs');\n\n  var EventEmitter = require('events').EventEmitter,\n      forEachAsync = require('forEachAsync'),\n      File = require('File'),\n      FileReader = require('FileReader');\n\n  function isFile(o) {\n    return o instanceof File || o.name && (o.path || o.stream || o.buffer);\n  }\n\n  function FormData() {\n    var self = this,\n        first = true,\n        fields = {};\n    self.nodeChunkedEncoding = false;\n\n    self.setNodeChunkedEncoding = function (val) {\n      self.nodeChunkedEncoding = val;\n    };\n\n    self.getContentType = function () {\n      return self.type;\n    };\n\n    self.append = function (key, val) {\n      var field = fields[key] = fields[key] || [],\n          err;\n\n      if (field.length > 0 && '[]' !== key.substr(key.length - 2)) {\n        err = new Error(\"Overwriting '\" + key + \"'. Use '\" + key + \"[] if you intend this to be treated as an array' \");\n        console.log(err.message);\n        field.pop();\n      }\n\n      field.push(val);\n      return err;\n    };\n\n    function toJSON() {\n      /*\n        files.forEach(function (file) {\n          var fr = new FileReader();\n          fr.addEventListener('load', join.deliverer());\n          fr.readAsText('base64');\n        });\n      */\n    }\n\n    function toContentDisposition(key, val) {\n      var emitter = new EventEmitter(),\n          text = '',\n          fr;\n\n      if (first) {\n        first = false;\n      } else {\n        text += '\\r\\n';\n      }\n\n      text += '--' + self.boundary;\n      text += \"\\r\\nContent-Disposition: form-data; name=\" + key.quote();\n\n      if (!isFile(val)) {\n        if ('string' !== typeof val) {\n          val = JSON.stringify(val);\n        }\n\n        process.nextTick(function () {\n          emitter.emit('data', new Buffer(text + \"\\r\\n\\r\\n\" + val));\n          emitter.emit('end');\n        });\n      } else {\n        fr = new FileReader();\n        fr.on('loadstart', function () {\n          text += '; filename=\"' + val.name + '\"';\n          text += \"\\r\\nContent-Type: \" + (val.type || 'application/binary') + \"\\r\\n\\r\\n\";\n          emitter.emit('data', new Buffer(text));\n        });\n        fr.on('data', function (data) {\n          emitter.emit('data', data);\n        });\n        fr.on('loadend', function () {\n          emitter.emit('end');\n        });\n        fr.setNodeChunkedEncoding(self.nodeChunkedEncoding);\n        fr.readAsArrayBuffer(val);\n      }\n\n      return emitter;\n    }\n\n    function toFormData() {\n      var emitter = new EventEmitter(),\n          buffers = [];\n      emitter.on('data', function (data) {\n        buffers.push(data);\n      });\n      forEachAsync(Object.keys(fields), function (next, key) {\n        forEachAsync(fields[key], function (next, item) {\n          var stream = toContentDisposition(key, item);\n          stream.on('data', function (data) {\n            emitter.emit('data', data);\n          });\n          stream.on('end', next);\n        }).then(next);\n      }).then(function (next) {\n        var footer = new Buffer(\"\\r\\n--\" + self.boundary + \"--\\r\\n\");\n        emitter.emit('data', footer);\n        emitter.emit('ready');\n        next(); // does cleanup\n      });\n      emitter.on('ready', function () {\n        var data = Buffer.concat(buffers); // TODO\n        // determine the size as quickly as possible\n        // so that the data can still be streamed, even\n        // if the content-length must be known\n        //\n        // This will only take a significant amount of time\n        // if one of the `File`s is stream-backed. Waiting\n        // for the stream's `end` will hold-up the content-length\n        // calculation.\n\n        emitter.emit('size', data.length);\n        emitter.emit('load', data);\n        emitter.emit('end');\n      });\n      return emitter;\n    }\n\n    function toFormUrlEncoded() {}\n\n    function randomString(len, charset) {\n      var numbers = \"0123456789\",\n          ualpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n          lalpha = \"abcdefghijklmnopqrstuvwxyz\",\n          special = \"+/-_:\",\n          radix = {\n        base16: numbers + ualpha.substr(0, 6),\n        base36: numbers + ualpha,\n        base64: ualpha + lalpha + numbers + special.substr(0, 2),\n        base64url: ualpha + lalpha + numbers + special.substr(2, 2),\n        base64xml: ualpha + lalpha + numbers + special.substr(3, 2)\n      },\n          result = '',\n          chars,\n          length,\n          seed,\n          i;\n      length = len || 8;\n      chars = radix[charset] || charset || radix.base64url;\n\n      for (i = 0; i < length; i += 1) {\n        seed = Math.floor(Math.random() * chars.length);\n        result += chars.substring(seed, seed + 1);\n      }\n\n      return result;\n    }\n\n    self.serialize = function (intendedType) {\n      self.type = intendedType = (intendedType || '').toLowerCase();\n\n      if ('multipart/form-data' !== self.type) {\n        Object.keys(fields).forEach(function (key) {\n          // TODO traverse entire tree\n          fields[key].forEach(function (item) {\n            if (isFile(item)) {\n              self.type = 'multipart/form-data';\n            }\n          });\n        });\n\n        if ('multipart/form-data' === self.type) {\n          console.log(\"ContentType changed `multipart/form-data`: Some of the upload items are `HTML5::FileAPI::File`s.\");\n        } // This is how FireFox does it. Seems good enough to me.\n        // Note that the spec also allows a space in the middle, but not at the end\n        // http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html\n        //self.boundary = \"---------------------------5414130496409022042012852923\";\n\n\n        self.boundary = '---------------------------' + randomString(28, 'base64url', \"'()+_,-./:=?\");\n        self.type += '; boundary=' + self.boundary;\n        return toFormData();\n      }\n\n      if (!self.type || 'application/x-www-form-urlencoded' === self.type.toLowerCase()) {\n        self.type = 'application/x-www-form-urlencoded';\n        return toFormUrlEncoded();\n      }\n\n      if ('application/json' === self.type.toLowerCase()) {\n        return toJSON();\n      }\n    };\n  }\n\n  module.exports = FormData;\n})();","map":null,"metadata":{},"sourceType":"script"}